version: '3.8'

services:
  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: laravel_admin_staging_nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./public:/var/www/html/public:ro
      - ./storage/app/public:/var/www/html/storage/app/public:ro
      - staging_ssl_certs:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - laravel_admin_staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/alive"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PHP-FPM 應用程式
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.staging
      args:
        - PHP_VERSION=8.2
    container_name: laravel_admin_staging_app
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ./public/storage:/var/www/html/public/storage
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=laravel_admin_staging
      - DB_USERNAME=laravel_staging
      - DB_PASSWORD=${STAGING_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${STAGING_REDIS_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - laravel_admin_staging
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute=echo 'ok';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL 資料庫
  mysql:
    image: mysql:8.0
    container_name: laravel_admin_staging_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${STAGING_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: laravel_admin_staging
      MYSQL_USER: laravel_staging
      MYSQL_PASSWORD: ${STAGING_DB_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - staging_mysql_data:/var/lib/mysql
      - ./docker/mysql/staging.cnf:/etc/mysql/conf.d/custom.cnf
      - ./docker/mysql/init-staging.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "33061:3306"
    restart: unless-stopped
    networks:
      - laravel_admin_staging
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${STAGING_MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis 快取和 Session
  redis:
    image: redis:7-alpine
    container_name: laravel_admin_staging_redis
    command: redis-server --requirepass ${STAGING_REDIS_PASSWORD} --appendonly yes
    volumes:
      - staging_redis_data:/data
      - ./docker/redis/staging.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "63791:6379"
    restart: unless-stopped
    networks:
      - laravel_admin_staging
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${STAGING_REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 佇列工作程序
  queue:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.staging
    container_name: laravel_admin_staging_queue
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600 --memory=512
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=laravel_admin_staging
      - DB_USERNAME=laravel_staging
      - DB_PASSWORD=${STAGING_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${STAGING_REDIS_PASSWORD}
      - QUEUE_CONNECTION=redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - laravel_admin_staging
    healthcheck:
      test: ["CMD", "php", "artisan", "queue:monitor", "default", "--max-jobs=1000"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # 排程工作程序
  scheduler:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.staging
    container_name: laravel_admin_staging_scheduler
    command: php artisan schedule:work
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=laravel_admin_staging
      - DB_USERNAME=laravel_staging
      - DB_PASSWORD=${STAGING_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${STAGING_REDIS_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - laravel_admin_staging

  # MailHog (測試環境郵件捕獲)
  mailhog:
    image: mailhog/mailhog
    container_name: laravel_admin_staging_mailhog
    ports:
      - "10251:1025"  # SMTP
      - "80251:8025"  # Web UI
    restart: unless-stopped
    networks:
      - laravel_admin_staging

networks:
  laravel_admin_staging:
    driver: bridge

volumes:
  staging_mysql_data:
    driver: local
  staging_redis_data:
    driver: local
  staging_ssl_certs:
    driver: local